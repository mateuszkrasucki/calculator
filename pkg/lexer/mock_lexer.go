// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/mateuszkrasucki/go/src/github.com/mateuszkrasucki/calculator/pkg/lexer/lexer.go

// Package lexer is a generated GoMock package.
package lexer

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockItem is a mock of Item interface
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// GetType mocks base method
func (m *MockItem) GetType() ItemType {
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(ItemType)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockItemMockRecorder) GetType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockItem)(nil).GetType))
}

// GetString mocks base method
func (m *MockItem) GetString() string {
	ret := m.ctrl.Call(m, "GetString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString
func (mr *MockItemMockRecorder) GetString() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockItem)(nil).GetString))
}

// MockLexer is a mock of Lexer interface
type MockLexer struct {
	ctrl     *gomock.Controller
	recorder *MockLexerMockRecorder
}

// MockLexerMockRecorder is the mock recorder for MockLexer
type MockLexerMockRecorder struct {
	mock *MockLexer
}

// NewMockLexer creates a new mock instance
func NewMockLexer(ctrl *gomock.Controller) *MockLexer {
	mock := &MockLexer{ctrl: ctrl}
	mock.recorder = &MockLexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLexer) EXPECT() *MockLexerMockRecorder {
	return m.recorder
}

// NextItem mocks base method
func (m *MockLexer) NextItem() Item {
	ret := m.ctrl.Call(m, "NextItem")
	ret0, _ := ret[0].(Item)
	return ret0
}

// NextItem indicates an expected call of NextItem
func (mr *MockLexerMockRecorder) NextItem() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextItem", reflect.TypeOf((*MockLexer)(nil).NextItem))
}
