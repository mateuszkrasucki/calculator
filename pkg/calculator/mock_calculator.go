// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/mateuszkrasucki/go/src/github.com/mateuszkrasucki/calculator/pkg/calculator/calculator.go

// Package calculator is a generated GoMock package.
package calculator

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOperationInterface is a mock of OperationInterface interface
type MockOperationInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOperationInterfaceMockRecorder
}

// MockOperationInterfaceMockRecorder is the mock recorder for MockOperationInterface
type MockOperationInterfaceMockRecorder struct {
	mock *MockOperationInterface
}

// NewMockOperationInterface creates a new mock instance
func NewMockOperationInterface(ctrl *gomock.Controller) *MockOperationInterface {
	mock := &MockOperationInterface{ctrl: ctrl}
	mock.recorder = &MockOperationInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOperationInterface) EXPECT() *MockOperationInterfaceMockRecorder {
	return m.recorder
}

// Calculate mocks base method
func (m *MockOperationInterface) Calculate(arg0 context.Context) (float64, error) {
	ret := m.ctrl.Call(m, "Calculate", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Calculate indicates an expected call of Calculate
func (mr *MockOperationInterfaceMockRecorder) Calculate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockOperationInterface)(nil).Calculate), arg0)
}

// MockCalculator is a mock of Calculator interface
type MockCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorMockRecorder
}

// MockCalculatorMockRecorder is the mock recorder for MockCalculator
type MockCalculatorMockRecorder struct {
	mock *MockCalculator
}

// NewMockCalculator creates a new mock instance
func NewMockCalculator(ctrl *gomock.Controller) *MockCalculator {
	mock := &MockCalculator{ctrl: ctrl}
	mock.recorder = &MockCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalculator) EXPECT() *MockCalculatorMockRecorder {
	return m.recorder
}

// Calculate mocks base method
func (m *MockCalculator) Calculate(arg0 context.Context, arg1 string) (float64, error) {
	ret := m.ctrl.Call(m, "Calculate", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Calculate indicates an expected call of Calculate
func (mr *MockCalculatorMockRecorder) Calculate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockCalculator)(nil).Calculate), arg0, arg1)
}
